########### 
# read data 
########### 

# (used.car = read.table('C:\\ ... \\usedcar.txt'));

colnames(used.car) = c('price','years');

class(used.car);

str(used.car);

(n = dim(used.car)[1]);

########### 
# plot data 
###########  

windows(); # take the plot outside RStudio 

#################################################
# X11() for Unix; quartz() for Mac
#  
# http://www.statmethods.net/graphs/creating.html
#################################################

with(used.car,plot(years,price, pch = 16,   
main = 'Used car data',
col = 'royalblue', cex = 1.5,
ylim = c(-2.5,17)));  

####################################
# interpolate several lines visually 
#################################### 

intercept = 14.4602;

slope = -1.3072;

abline(a = intercept, b = slope, lty = '1373', 
col = 'firebrick1',
lwd = 2.5);

############################
# remove significance stars;
############################

options(show.signif.stars = FALSE); 

######################################### 
# fit of simple linear regression model  
#
# for writing '~', do 'AltGr + 4 + Space' 
######################################### 

f = price ~ years; # f: formula

# or simply f = price ~ . ;

model = lm(f, data = used.car);  

summary(model);

str(model); 

str(summary(model)); 

##########################
# investigate significance
##########################

LS.fit = with(summary(model), coefficients);

format(round(LS.fit,d = 4)); # for screen display purposes

########################## 
# t - ratio for H_0: b = 0
########################## 

(t = LS.fit[2,3]);

#########################
# as compared to output
# in standard ANOVA table 
#########################

f = price ~ 1.;

one.sample = lm(f,used.car); 

anova(one.sample,model);

############################## 
# F - statistic for H_0: b = 0
############################## 

(F = with(summary(model), fstatistic));

###########
# or simply
###########

(F = with(summary(model), fstatistic)[1]);

#####################
# that coincides with
#####################

t^2
 
###############
# model matrix;
###############

model.matrix(model)[,]; # [,] for extraction;

###########################################
# coefficients, fitted values and residuals 
###########################################

(betas = coef(model));

fit = fitted(model); 

res = residuals(model); 

stres = rstandard(model); 

studres = rstudent(model); 

windows(); 

par(mfrow = c(2,2));

plot(model,which = c(1:2),
add.smooth = FALSE, 
label.id = NULL,
sub.caption = '', 
caption = 'residual plots',
cex = 1.2, 
col = 'purple',
lwd = 1.5,
pch = 19);  

library(car);

windows();

residualPlots(model, 
type = 'rstudent',
layout = c(1,1),
tests = FALSE, 
quadratic = FALSE,
ask = FALSE,
fitted = FALSE,
col = 'navy',
pch = 19,
cex = 1.5); 
 
################################################
# confidence intervals for individual parameters 
################################################

confint(model, 'years', level = 0.90);

####################################################################
# confidence and prediction intervals for specified regressor values 
####################################################################

(conf.int = predict(model, 
with(used.car, data.frame(years)), 
interval = 'confidence', 
level = 0.95));

######################################
# width of confidence bands depends on 
# abs(years - mean(years)
######################################

(pred.int = predict(model, 
with(used.car, data.frame(years)), 
interval = 'predict', 
level = 0.95)); 

#######################################
# width of prediction bands is constant 
# to first order linear approximation 
#######################################

dev.set(2);  

with(used.car, 
lines(years, conf.int[,2], 
col = 'purple', 
lty = '22', lwd = 2.));   

with(used.car, 
lines(years, conf.int[,3], 
col = 'purple', 
lty = '22', lwd = 2.));    

with(used.car, 
lines(years, pred.int[,2], 
col = 'black', 
lty = '22', lwd = 2.));   

with(used.car, 
lines(years, pred.int[,3], 
col = 'black', 
lty = '22', lwd = 2.));  

################################
# predictions may not have sense
################################

newdata = data.frame(c(5, 8, 10, 13));

colnames(newdata) = 'years';

pred = predict(model, 
newdata, 
interval = 'prediction', 
level = 0.95); 

data.frame(newdata,pred); 